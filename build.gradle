apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'

apply from: "${rootProject.projectDir}/publish-maven.gradle"

if (project.hasProperty('platformVersion')) {
	apply plugin: 'spring-io'

	// necessary to resolve the Spring IO versions (which may include snapshots)
	repositories {
		maven { url "https://repo.spring.io/libs-snapshot" }
	}

	dependencies {
		springIoVersions "io.spring.platform:platform-versions:${platformVersion}@properties"
	}
}

description = 'Spring-Cloud Support for Pivotal CF'

sourceCompatibility = 1.6
targetCompatibility = 1.6

javadoc {
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
}

task packageSources(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier = "javadoc"
	from javadoc
}

ext {
	javadocLinks = [
		'http://docs.oracle.com/javase/7/docs/api/',
		'http://docs.oracle.com/javaee/6/api/',
		'http://docs.spring.io/spring/docs/current/javadoc-api/',
	] as String[]
}

task api(type: Javadoc) {
	group = "Documentation"
	description = "Generates aggregated Javadoc API documentation."
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.links(project.ext.javadocLinks)

	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}

	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})

	maxMemory = "1024m"
	destinationDir = new File(buildDir, "api")
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at docs.spring.io/spring-cloud/docs."

	from(api) {
		into 'api'
	}
}

artifacts {
	archives packageSources
	archives javadocJar
}

dependencies {
	 compile("org.springframework.cloud:spring-cloud-core:$springCloudVersion")
	 compile("org.springframework.cloud:spring-cloud-cloudfoundry-connector:$springCloudVersion")
	 compile("org.springframework.cloud:spring-cloud-spring-service-connector:$springCloudVersion")

	 compile("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
	 compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")

     optional("org.apache.hadoop:hadoop-common:$hadoopCommonVersion")
	 optional("com.netflix.eureka:eureka-client:$eurekaClientVersion")

	 testCompile("org.springframework.cloud:spring-cloud-cloudfoundry-connector:$springCloudVersion")
	 testCompile group: 'org.springframework.cloud', name: 'spring-cloud-cloudfoundry-connector', version:'$springCloudVersion', classifier: 'tests' 
	 testCompile("junit:junit:$junitVersion")
	 testCompile("org.mockito:mockito-core:$mockitoVersion")
}

repositories {
	mavenLocal()

	maven { url "http://repo.spring.io/snapshot" }
	maven { url "http://repo.spring.io/milestone" }
	maven { url "http://repo.spring.io/libs-milestone" }
	maven { url "http://repo.maven.apache.org/maven2" }
}

buildscript {
	repositories {
		maven { url 'http://repo.springsource.org/plugins-release' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.5'
		classpath 'org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE'
	}
}

ext {
	matrix = [
		   "spring32"       : [springVersion: "3.2.9.RELEASE"],
		   "spring40"       : [springVersion: "4.0.5.RELEASE"]
	]
}

task matrixTests

task defineMatrixTests {
        def createTestTask = { name, props ->
                task "$name"(type: GradleBuild) {
                        tasks = ['test']
                        startParameter.projectProperties = props
                }
        }
        matrix.each { sp ->
                def testTask = createTestTask(sp.key, sp.value)
                matrixTests.dependsOn(testTask.name)
        }
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist and -docs distribution archives.'
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.12'
}

